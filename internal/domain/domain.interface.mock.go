// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain.interface.go
//
// Generated by this command:
//
//	mockgen -source=./domain.interface.go -destination=./domain.interface.mock.go -package=domain
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMovieUsecase is a mock of IMovieUsecase interface.
type MockIMovieUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIMovieUsecaseMockRecorder
}

// MockIMovieUsecaseMockRecorder is the mock recorder for MockIMovieUsecase.
type MockIMovieUsecaseMockRecorder struct {
	mock *MockIMovieUsecase
}

// NewMockIMovieUsecase creates a new mock instance.
func NewMockIMovieUsecase(ctrl *gomock.Controller) *MockIMovieUsecase {
	mock := &MockIMovieUsecase{ctrl: ctrl}
	mock.recorder = &MockIMovieUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMovieUsecase) EXPECT() *MockIMovieUsecaseMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockIMovieUsecase) CreateMovie(ctx context.Context, param CreateMovieParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockIMovieUsecaseMockRecorder) CreateMovie(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockIMovieUsecase)(nil).CreateMovie), ctx, param)
}

// DeleteMovie mocks base method.
func (m *MockIMovieUsecase) DeleteMovie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockIMovieUsecaseMockRecorder) DeleteMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockIMovieUsecase)(nil).DeleteMovie), ctx, id)
}

// GetMovie mocks base method.
func (m *MockIMovieUsecase) GetMovie(ctx context.Context, id int64) (Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, id)
	ret0, _ := ret[0].(Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockIMovieUsecaseMockRecorder) GetMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockIMovieUsecase)(nil).GetMovie), ctx, id)
}

// ListMovie mocks base method.
func (m *MockIMovieUsecase) ListMovie(ctx context.Context, size int32, token string) ([]Movie, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovie", ctx, size, token)
	ret0, _ := ret[0].([]Movie)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMovie indicates an expected call of ListMovie.
func (mr *MockIMovieUsecaseMockRecorder) ListMovie(ctx, size, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovie", reflect.TypeOf((*MockIMovieUsecase)(nil).ListMovie), ctx, size, token)
}

// UpdateMovie mocks base method.
func (m *MockIMovieUsecase) UpdateMovie(ctx context.Context, param UpdateMovieParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockIMovieUsecaseMockRecorder) UpdateMovie(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockIMovieUsecase)(nil).UpdateMovie), ctx, param)
}

// MockIMovieRepo is a mock of IMovieRepo interface.
type MockIMovieRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIMovieRepoMockRecorder
}

// MockIMovieRepoMockRecorder is the mock recorder for MockIMovieRepo.
type MockIMovieRepoMockRecorder struct {
	mock *MockIMovieRepo
}

// NewMockIMovieRepo creates a new mock instance.
func NewMockIMovieRepo(ctrl *gomock.Controller) *MockIMovieRepo {
	mock := &MockIMovieRepo{ctrl: ctrl}
	mock.recorder = &MockIMovieRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMovieRepo) EXPECT() *MockIMovieRepoMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockIMovieRepo) CreateMovie(ctx context.Context, param CreateMovieParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockIMovieRepoMockRecorder) CreateMovie(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockIMovieRepo)(nil).CreateMovie), ctx, param)
}

// DeleteMovie mocks base method.
func (m *MockIMovieRepo) DeleteMovie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockIMovieRepoMockRecorder) DeleteMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockIMovieRepo)(nil).DeleteMovie), ctx, id)
}

// GetMovie mocks base method.
func (m *MockIMovieRepo) GetMovie(ctx context.Context, id int64) (Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, id)
	ret0, _ := ret[0].(Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockIMovieRepoMockRecorder) GetMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockIMovieRepo)(nil).GetMovie), ctx, id)
}

// ListMovie mocks base method.
func (m *MockIMovieRepo) ListMovie(ctx context.Context, size int32, token string) ([]Movie, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovie", ctx, size, token)
	ret0, _ := ret[0].([]Movie)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMovie indicates an expected call of ListMovie.
func (mr *MockIMovieRepoMockRecorder) ListMovie(ctx, size, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovie", reflect.TypeOf((*MockIMovieRepo)(nil).ListMovie), ctx, size, token)
}

// UpdateMovie mocks base method.
func (m *MockIMovieRepo) UpdateMovie(ctx context.Context, param UpdateMovieParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockIMovieRepoMockRecorder) UpdateMovie(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockIMovieRepo)(nil).UpdateMovie), ctx, param)
}

// MockISQLDatabase is a mock of ISQLDatabase interface.
type MockISQLDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockISQLDatabaseMockRecorder
}

// MockISQLDatabaseMockRecorder is the mock recorder for MockISQLDatabase.
type MockISQLDatabaseMockRecorder struct {
	mock *MockISQLDatabase
}

// NewMockISQLDatabase creates a new mock instance.
func NewMockISQLDatabase(ctrl *gomock.Controller) *MockISQLDatabase {
	mock := &MockISQLDatabase{ctrl: ctrl}
	mock.recorder = &MockISQLDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISQLDatabase) EXPECT() *MockISQLDatabaseMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockISQLDatabase) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockISQLDatabaseMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockISQLDatabase)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockISQLDatabase) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockISQLDatabaseMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockISQLDatabase)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockISQLDatabase) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockISQLDatabaseMockRecorder) QueryRowContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockISQLDatabase)(nil).QueryRowContext), varargs...)
}
